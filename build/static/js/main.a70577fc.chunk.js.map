{"version":3,"sources":["components/New-task-form/index.js","components/New-task-form/New-task-form.js","constants.js","components/Clocks/index.js","components/Clocks/Clocks.js","components/Task/index.js","components/Task/Task.js","components/Task-list/index.js","components/Task-list/Task-list.js","components/Task-filter-btn/index.js","components/Task-filter-btn/task-filter-btn.js","components/Tasks-filter/Tasks-filter.js","components/Footer/index.js","components/Footer/Footer.js","components/Todoapp/index.js","components/Todoapp/Todoapp.js","index.js"],"names":["NewTaskForm","onItemAdded","useState","label","setLabel","className","placeholder","onChange","e","target","value","onKeyDown","keyCode","Clocks","hours","setHours","minutes","setMinutes","seconds","setSeconds","ticking","setTicking","timer","useCallback","s","m","h","useEffect","tick","setInterval","clearInterval","type","onClick","Task","description","onDeleted","onToggleCompleted","onToggleEditing","completed","hidden","time","editing","onKeyCodeDown","classNames","setClassNames","htmlFor","id","formatDistanceToNow","includeSeconds","aria-label","TaskList","tasks","elements","map","taskItems","TaskFilterBtn","isActive","onToggleActive","setClassName","TasksFilter","filterBtns","filterBtnsArr","filterBtnItems","Footer","taskCount","onClearCompleted","TodoApp","createTodoItem","Math","random","toString","substr","Date","taskData","setTaskData","filterBtnsData","setFilterBtnsData","toggleProperty","arr","propName","item","completedCount","filter","el","length","text","newItem","newTaskData","newArr","activeToggler","forEach","data","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a70577fc.chunk.js","sourcesContent":["import NewTaskForm from './New-task-form';\r\n\r\nexport default NewTaskForm;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ENTER_KEY_CODE } from '../../constants';\r\n\r\nconst NewTaskForm = ({ onItemAdded }) => {\r\n\r\n  const [label, setLabel] = useState('');\r\n\r\n  const onLabelChange = (e) => {\r\n    setLabel(() => e.target.value);\r\n  };\r\n\r\n  const onKeyDown = (e) => {\r\n\r\n    if (e.keyCode === ENTER_KEY_CODE) {\r\n      onItemAdded(label);\r\n      setLabel(() => '');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"new-todo\"\r\n      placeholder=\"What needs to be done?\"\r\n      onChange={onLabelChange}\r\n      onKeyDown={onKeyDown}\r\n      value={label}\r\n    />\r\n  );\r\n}\r\n\r\nNewTaskForm.propTypes = {\r\n  onItemAdded: PropTypes.func,\r\n};\r\n\r\nexport default NewTaskForm;","const ESC_KEY_CODE = 27;\r\nconst ENTER_KEY_CODE = 13;\r\n\r\nexport { ESC_KEY_CODE, ENTER_KEY_CODE };\r\n","import Clocks from './Clocks';\n\nexport default Clocks;\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport './Clocks.css';\r\n\r\nconst Clocks = () => {\r\n\r\n   const [hours, setHours] = useState(0);\r\n   const [minutes, setMinutes] = useState(0);\r\n   const [seconds, setSeconds] = useState(0);\r\n   const [ticking, setTicking] = useState(false);\r\n\r\n   const timer = useCallback(() => {\r\n\r\n      if (ticking && seconds < 60) {\r\n         setSeconds((s) => s + 1);\r\n      } else if (ticking && minutes < 60) {\r\n         setMinutes((m) => m + 1);\r\n         setSeconds(() => 0);\r\n      } else if (ticking) {\r\n         setHours((h) => h + 1);\r\n         setMinutes(() => 0);\r\n      }\r\n   }, [minutes, seconds, ticking]);\r\n\r\n   const startClocks = () => {\r\n      setTicking(() => true);\r\n   };\r\n\r\n   const stopClocks = () => {\r\n      setTicking(() => false);\r\n   }\r\n\r\n   useEffect(() => {\r\n      const tick = setInterval(timer, 1000);\r\n\r\n      return clearInterval(tick);\r\n   }, [ timer ]);\r\n\r\n   return (\r\n      <div className=\"clock\">\r\n         <button \r\n            type=\"button\"\r\n            className=\"clock__run-btn\"\r\n            onClick={startClocks}\r\n            >\r\n               {'>'}\r\n         </button>\r\n         <button \r\n            type=\"button\"\r\n            className=\"clock__stop-btn\"\r\n            onClick={stopClocks}\r\n            >\r\n               ||\r\n         </button>\r\n         <div className=\"clock__display\">\r\n            <p> {hours} h </p>\r\n            <p> {minutes} min </p>\r\n            <p> {seconds} sec </p>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Clocks;","import Task from './Task';\r\n\r\nexport default Task;\r\n","import React, { useState } from 'react';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\r\nimport PropTypes from 'prop-types';\r\nimport Clocks from '../Clocks';\r\n\r\nconst Task = ({ description, onDeleted,\r\n                onToggleCompleted, onToggleEditing,\r\n                completed, hidden, time, editing,\r\n                                onKeyCodeDown }) => {\r\n    \r\n    const [label, setLabel] = useState(description);\r\n    \r\n    const onLabelChange = (e) => {\r\n      setLabel(() => e.target.value);\r\n    };\r\n  \r\n    const setClassNames = () => {\r\n      let classNames = '';\r\n\r\n      if (editing) {\r\n        classNames += ' editing';\r\n      }\r\n\r\n      if (completed) {\r\n        classNames += ' completed';\r\n      }\r\n\r\n      if (hidden) {\r\n        classNames += ' hidden';\r\n      }\r\n\r\n      return classNames;\r\n    };\r\n\r\n  return (\r\n    <li className={setClassNames()}>\r\n      <div className=\"view\">\r\n        <input className=\"toggle\" type=\"checkbox\" onClick={onToggleCompleted} />\r\n        <label htmlFor=\"description created\">\r\n          <span id=\"description\" className=\"description\">\r\n            {label}\r\n          </span>\r\n          <Clocks />\r\n          <span id=\"created\" className=\"created\">\r\n            {formatDistanceToNow(time, { includeSeconds: true })}\r\n          </span>\r\n        </label>\r\n        <button\r\n          type=\"button\"\r\n          className=\"icon icon-edit\"\r\n          onClick={onToggleEditing}\r\n          aria-label=\"Editing Toggle\"\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          className=\"icon icon-destroy\"\r\n          onClick={onDeleted}\r\n          aria-label=\"Delete Task\"\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        className=\"edit\"\r\n        onChange={onLabelChange}\r\n        onKeyDown={onKeyCodeDown}\r\n        value={label}\r\n      />\r\n    </li>\r\n  );\r\n}\r\n\r\nTask.propTypes = {\r\n  description: PropTypes.string,\r\n  onDeleted: PropTypes.func,\r\n  onToggleCompleted: PropTypes.func,\r\n  onToggleEditing: PropTypes.func,\r\n  completed: PropTypes.bool,\r\n  hidden: PropTypes.bool,\r\n  time: PropTypes.any,\r\n  editing: PropTypes.bool,\r\n  onKeyCodeDown: PropTypes.func,\r\n};\r\n\r\nexport default Task;","import TaskList from './Task-list';\r\n\r\nexport default TaskList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from '../Task';\r\n\r\nconst TaskList = ({ tasks, onDeleted, onToggleCompleted, onToggleEditing, onKeyCodeDown }) => {\r\n  const elements = tasks.map(({ id, ...taskItems }) => {\r\n    return (\r\n      <Task\r\n        key={id}\r\n        {...taskItems}\r\n        onKeyCodeDown={(e) => onKeyCodeDown(e, id)}\r\n        onDeleted={() => onDeleted(id)}\r\n        onToggleCompleted={() => onToggleCompleted(id)}\r\n        onToggleEditing={() => onToggleEditing(id)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <ul className=\"todo-list\">{elements}</ul>;\r\n};\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.array,\r\n  onDeleted: PropTypes.func,\r\n  onToggleCompleted: PropTypes.func,\r\n  onToggleEditing: PropTypes.func,\r\n  onKeyCodeDown: PropTypes.func,\r\n};\r\n\r\nexport default TaskList;\r\n","import TaskFilterBtn from './task-filter-btn';\r\n\r\nexport default TaskFilterBtn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TaskFilterBtn = ({ label, isActive, onToggleActive }) => {\r\n  function setClassName() {\r\n    let classNames = '';\r\n    if (isActive) {\r\n      classNames += ' selected';\r\n    }\r\n    return classNames;\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      <button type=\"button\" className={setClassName()} onClick={onToggleActive}>\r\n        {label}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nTaskFilterBtn.propTypes = {\r\n  label: PropTypes.string,\r\n  isActive: PropTypes.bool,\r\n  onToggleActive: PropTypes.func,\r\n};\r\n\r\nexport default TaskFilterBtn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskFilterBtn from '../Task-filter-btn';\r\n\r\nconst TasksFilter = ({ filterBtns, onToggleActive }) => {\r\n  const filterBtnsArr = filterBtns.map(({ id, ...filterBtnItems }) => {\r\n    return <TaskFilterBtn key={id} {...filterBtnItems} onToggleActive={() => onToggleActive(id)} />;\r\n  });\r\n\r\n  return <ul className=\"filters\">{filterBtnsArr}</ul>;\r\n};\r\n\r\nTasksFilter.propTypes = {\r\n  filterBtns: PropTypes.array,\r\n  onToggleActive: PropTypes.func,\r\n};\r\n\r\nexport default TasksFilter;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TasksFilter from '../Tasks-filter/Tasks-filter';\r\n\r\nconst Footer = ({ taskCount, onClearCompleted, filterBtns, onToggleActive }) => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">{taskCount} items left</span>\r\n      <TasksFilter filterBtns={filterBtns} onToggleActive={onToggleActive} />\r\n      <button type=\"button\" className=\"clear-completed\" onClick={onClearCompleted}>\r\n        Clear completed\r\n      </button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nFooter.propTypes = {\r\n  taskCount: PropTypes.number,\r\n  onClearCompleted: PropTypes.func,\r\n  filterBtns: PropTypes.array,\r\n  onToggleActive: PropTypes.func,\r\n};\r\n\r\nexport default Footer;\r\n","import TodoApp from './Todoapp';\r\n\r\nexport default TodoApp;\r\n","import React, { useState } from 'react';\r\nimport '../../index.css';\r\nimport { ENTER_KEY_CODE, ESC_KEY_CODE } from '../../constants';\r\n\r\nimport NewTaskForm from '../New-task-form';\r\nimport TaskList from '../Task-list';\r\nimport Footer from '../Footer';\r\n\r\nconst TodoApp = () => {\r\n\r\n  const setID = () => {\r\n    return `_${Math.random().toString(36).substr(2, 9)}`;\r\n  };\r\n\r\n  const createTodoItem = (description) => {\r\n    return {\r\n      description,\r\n      completed: false,\r\n      editing: false,\r\n      id: setID(),\r\n      hidden: false,\r\n      time: new Date(),\r\n    };\r\n  };\r\n\r\n  const [taskData, setTaskData] = useState(\r\n    [\r\n      createTodoItem('Completed Task'),\r\n      createTodoItem('Editing Task'),\r\n      createTodoItem('New Task'),\r\n    ]\r\n  );\r\n  const [filterBtnsData, setFilterBtnsData] = useState(\r\n    [\r\n      { label: 'All', isActive: false, id: 1 },\r\n      { label: 'Active', isActive: true, id: 2 },\r\n      { label: 'Completed', isActive: false, id: 3 },\r\n    ]\r\n  );\r\n\r\n  const deleteItem = (id) => {\r\n      const newTaskData = taskData.filter((el) => el.id !== id);\r\n      setTaskData(newTaskData);\r\n  };\r\n\r\n  const addItem = (text) => {\r\n    const newItem = createTodoItem(text);\r\n    const newTaskData = [...taskData, newItem];\r\n    setTaskData(newTaskData);\r\n  };\r\n\r\n  const toggleProperty = (arr, id, propName) => {\r\n    return arr.map((item) => {\r\n      if (item.id === id) {\r\n        const newItem = { ...item, [propName]: !item[propName] };\r\n        return newItem;\r\n      }\r\n\r\n      return item;\r\n    });\r\n  };\r\n\r\n  const onToggleCompleted = (id) => {\r\n    setTaskData(toggleProperty(taskData, id, 'completed'));\r\n  };\r\n\r\n  const onToggleEditing = (id) => {\r\n    setTaskData(toggleProperty(taskData, id, 'editing'));\r\n  };\r\n\r\n  const onClearCompleted = () => {\r\n    const newArr = taskData.filter((el) => !el.completed);\r\n    setTaskData(newArr);\r\n  };\r\n\r\n  const activeToggler = (arr, id, propName) => {\r\n    return arr.map((item) => {\r\n      if (item.id === id && item.isActive === false) {\r\n        const newItem = { ...item, [propName]: !item[propName] };\r\n        return newItem;\r\n      }\r\n      if (item.id !== id && item.isActive === true) {\r\n        const newItem = { ...item, [propName]: !item[propName] };\r\n        return newItem;\r\n      }\r\n      return item;\r\n    });\r\n  };\r\n\r\n  const onToggleActive = (id) => {\r\n    setFilterBtnsData(activeToggler(filterBtnsData, id, 'isActive'));\r\n\r\n    filterBtnsData.forEach((el) => {\r\n      if (el.isActive && el.id === 3) {\r\n        const newArr = taskData.map((data) => {\r\n          if (data.completed === false) {\r\n            const newData = { ...data, hidden: true };\r\n            return newData;\r\n          }\r\n          if (data.completed) {\r\n            const newData = { ...data, hidden: false };\r\n            return newData;\r\n          }\r\n          return data;\r\n        });\r\n        setTaskData(newArr);\r\n      } else if (el.isActive && el.id === 2) {\r\n        const newArr = taskData.map((data) => {\r\n          if (data.completed) {\r\n            const newData = { ...data, hidden: true };\r\n            return newData;\r\n          }\r\n          if (data.completed === false) {\r\n            const newData = { ...data, hidden: false };\r\n            return newData;\r\n          }\r\n          return data;\r\n        });\r\n        setTaskData(newArr);\r\n      } else if (el.isActive && el.id === 1) {\r\n        const newArr = taskData.map((data) => {\r\n          const newData = { ...data, hidden: false };\r\n          return newData;\r\n        });\r\n        setTaskData(newArr);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onKeyCodeDown = (e, id) => {\r\n    if (e.keyCode === ENTER_KEY_CODE || e.keyCode === ESC_KEY_CODE) {\r\n      setTaskData(toggleProperty(taskData, id, 'editing'))\r\n    };\r\n  };\r\n\r\n  const completedCount = taskData.filter((el) => el.completed).length;\r\n  const taskCount = taskData.length - completedCount;\r\n\r\n  return (\r\n    <section className=\"todoapp\">\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <NewTaskForm onItemAdded={addItem} />\r\n      </header>\r\n      <section className=\"main\">\r\n        <TaskList\r\n          tasks={taskData}\r\n          onDeleted={deleteItem}\r\n          onToggleCompleted={onToggleCompleted}\r\n          onToggleEditing={onToggleEditing}\r\n          filterBtns={filterBtnsData}\r\n          onKeyCodeDown={onKeyCodeDown}\r\n        />\r\n        <Footer\r\n          taskCount={taskCount}\r\n          onClearCompleted={onClearCompleted}\r\n          filterBtns={filterBtnsData}\r\n          onToggleActive={onToggleActive}\r\n        />\r\n      </section>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TodoApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport TodoApp from './components/Todoapp';\r\n\r\nReactDOM.render(<TodoApp />, document.querySelector('#root'));\r\n"],"sourceRoot":""}