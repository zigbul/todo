{"version":3,"sources":["components/New-task-form/index.js","components/New-task-form/New-task-form.js","constants.js","components/Clocks/index.js","components/Clocks/Clocks.js","components/Task/index.js","components/Task/Task.js","components/Task-list/index.js","components/Task-list/Task-list.js","components/Task-filter-btn/index.js","components/Task-filter-btn/task-filter-btn.js","components/Tasks-filter/Tasks-filter.js","components/Footer/index.js","components/Footer/Footer.js","components/Todoapp/index.js","components/Todoapp/Todoapp.js","index.js"],"names":["NewTaskForm","props","onLabelChange","e","setState","label","target","value","onKeyDown","onItemAdded","state","keyCode","this","className","placeholder","onChange","Component","Clocks","hours","minutes","seconds","ticking","startClocks","stopClocks","timer","tickings","setInterval","clearInterval","type","onClick","Task","description","onDeleted","onToggleCompleted","onToggleEditing","completed","hidden","time","editing","onKeyCodeDown","classNames","setClassNames","htmlFor","id","formatDistanceToNow","includeSeconds","aria-label","TaskList","tasks","elements","map","taskItems","TaskFilterBtn","isActive","onToggleActive","setClassName","TasksFilter","filterBtns","filterBtnsArr","filterBtnItems","Footer","taskCount","onClearCompleted","TodoApp","setID","Math","random","toString","substr","deleteItem","taskData","filter","el","addItem","text","newItem","createTodoItem","toggleProperty","newArr","filterBtnsData","activeToggler","forEach","data","arr","propName","item","Date","completedCount","length","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.117ee765.chunk.js","sourcesContent":["import NewTaskForm from './New-task-form';\r\n\r\nexport default NewTaskForm;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ENTER_KEY_CODE } from '../../constants';\r\n\r\nexport default class NewTaskForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      label: '',\r\n    };\r\n  }\r\n\r\n  onLabelChange = (e) => {\r\n    this.setState({\r\n      label: e.target.value,\r\n    });\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    const { onItemAdded } = this.props;\r\n    const { label } = this.state;\r\n\r\n    if (e.keyCode === ENTER_KEY_CODE) {\r\n      onItemAdded(label);\r\n      this.setState({\r\n        label: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { label } = this.state;\r\n    return (\r\n      <input\r\n        className=\"new-todo\"\r\n        placeholder=\"What needs to be done?\"\r\n        onChange={this.onLabelChange}\r\n        onKeyDown={this.onKeyDown}\r\n        value={label}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nNewTaskForm.propTypes = {\r\n  onItemAdded: PropTypes.func,\r\n};\r\n","const ESC_KEY_CODE = 27;\r\nconst ENTER_KEY_CODE = 13;\r\n\r\nexport { ESC_KEY_CODE, ENTER_KEY_CODE };\r\n","import Clocks from './Clocks';\n\nexport default Clocks;\n","import React, {Component} from 'react';\r\nimport './Clocks.css';\r\n\r\nexport default class Clocks extends Component {\r\n\r\n   state = {\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      ticking: false,\r\n   };\r\n\r\n   componentDidMount() {\r\n      this.timer();\r\n      this.tickings = setInterval(this.timer, 1000);\r\n   }\r\n\r\n   componentWillUnmount() {\r\n      clearInterval(this.tickings);\r\n   }\r\n\r\n   startClocks = () => {\r\n      this.setState({\r\n         ticking: true,\r\n      });\r\n   };\r\n\r\n   stopClocks = () => {\r\n      this.setState({\r\n         ticking: false,\r\n      })\r\n   }\r\n\r\n   timer = () => {\r\n\r\n      const { ticking, seconds, minutes } = this.state;\r\n\r\n      if (ticking && seconds < 60) {\r\n         this.setState({\r\n            seconds: seconds + 1,\r\n         });\r\n      } else if (ticking && minutes < 60) {\r\n         this.setState({\r\n            minutes: minutes + 1,\r\n            seconds: 0,\r\n         });\r\n      } else if (ticking) {\r\n         this.setState({\r\n            minutes\r\n         })\r\n      }\r\n   };\r\n\r\n   render() {\r\n\r\n      const { seconds, minutes, hours } = this.state;\r\n\r\n      return (\r\n         <div className=\"clock\">\r\n            <button \r\n               type=\"button\"\r\n               className=\"clock__run-btn\"\r\n               onClick={this.startClocks}\r\n               >\r\n                  {'>'}\r\n            </button>\r\n            <button \r\n               type=\"button\"\r\n               className=\"clock__stop-btn\"\r\n               onClick={this.stopClocks}\r\n               >\r\n                  ||\r\n            </button>\r\n            <div className=\"clock__display\">\r\n               <p> {hours} h </p>\r\n               <p> {minutes} min </p>\r\n               <p> {seconds} sec </p>\r\n            </div>\r\n         </div>\r\n      );\r\n   };\r\n};","import Task from './Task';\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\r\nimport PropTypes from 'prop-types';\r\nimport Clocks from '../Clocks';\r\n\r\n\r\nexport default class Task extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { description } = this.props;\r\n    this.state = {\r\n      description,\r\n    };\r\n  }\r\n\r\n  onLabelChange = (e) => {\r\n    this.setState({\r\n      description: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onDeleted,\r\n      onToggleCompleted,\r\n      onToggleEditing,\r\n      completed,\r\n      hidden,\r\n      time,\r\n      editing,\r\n      onKeyCodeDown,\r\n    } = this.props;\r\n\r\n    const { description } = this.state;\r\n\r\n    const setClassNames = () => {\r\n      let classNames = '';\r\n\r\n      if (editing) {\r\n        classNames += ' editing';\r\n      }\r\n\r\n      if (completed) {\r\n        classNames += ' completed';\r\n      }\r\n\r\n      if (hidden) {\r\n        classNames += ' hidden';\r\n      }\r\n\r\n      return classNames;\r\n    };\r\n\r\n    return (\r\n      <li className={setClassNames()}>\r\n        <div className=\"view\">\r\n          <input className=\"toggle\" type=\"checkbox\" onClick={onToggleCompleted} />\r\n          <label htmlFor=\"description created\">\r\n            <span id=\"description\" className=\"description\">\r\n              {description}\r\n            </span>\r\n            <Clocks />\r\n            <span id=\"created\" className=\"created\">\r\n              {formatDistanceToNow(time, { includeSeconds: true })}\r\n            </span>\r\n          </label>\r\n          <button\r\n            type=\"button\"\r\n            className=\"icon icon-edit\"\r\n            onClick={onToggleEditing}\r\n            aria-label=\"Editing Toggle\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            className=\"icon icon-destroy\"\r\n            onClick={onDeleted}\r\n            aria-label=\"Delete Task\"\r\n          />\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"edit\"\r\n          onChange={this.onLabelChange}\r\n          onKeyDown={onKeyCodeDown}\r\n          value={description}\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  description: PropTypes.string,\r\n  onDeleted: PropTypes.func,\r\n  onToggleCompleted: PropTypes.func,\r\n  onToggleEditing: PropTypes.func,\r\n  completed: PropTypes.bool,\r\n  hidden: PropTypes.bool,\r\n  time: PropTypes.any,\r\n  editing: PropTypes.bool,\r\n  onKeyCodeDown: PropTypes.func,\r\n};\r\n","import TaskList from './Task-list';\r\n\r\nexport default TaskList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from '../Task';\r\n\r\nconst TaskList = ({ tasks, onDeleted, onToggleCompleted, onToggleEditing, onKeyCodeDown }) => {\r\n  const elements = tasks.map(({ id, ...taskItems }) => {\r\n    return (\r\n      <Task\r\n        key={id}\r\n        {...taskItems}\r\n        onKeyCodeDown={(e) => onKeyCodeDown(e, id)}\r\n        onDeleted={() => onDeleted(id)}\r\n        onToggleCompleted={() => onToggleCompleted(id)}\r\n        onToggleEditing={() => onToggleEditing(id)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <ul className=\"todo-list\">{elements}</ul>;\r\n};\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.array,\r\n  onDeleted: PropTypes.func,\r\n  onToggleCompleted: PropTypes.func,\r\n  onToggleEditing: PropTypes.func,\r\n  onKeyCodeDown: PropTypes.func,\r\n};\r\n\r\nexport default TaskList;\r\n","import TaskFilterBtn from './task-filter-btn';\r\n\r\nexport default TaskFilterBtn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TaskFilterBtn = ({ label, isActive, onToggleActive }) => {\r\n  function setClassName() {\r\n    let classNames = '';\r\n    if (isActive) {\r\n      classNames += ' selected';\r\n    }\r\n    return classNames;\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      <button type=\"button\" className={setClassName()} onClick={onToggleActive}>\r\n        {label}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nTaskFilterBtn.propTypes = {\r\n  label: PropTypes.string,\r\n  isActive: PropTypes.bool,\r\n  onToggleActive: PropTypes.func,\r\n};\r\n\r\nexport default TaskFilterBtn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskFilterBtn from '../Task-filter-btn';\r\n\r\nconst TasksFilter = ({ filterBtns, onToggleActive }) => {\r\n  const filterBtnsArr = filterBtns.map(({ id, ...filterBtnItems }) => {\r\n    return <TaskFilterBtn key={id} {...filterBtnItems} onToggleActive={() => onToggleActive(id)} />;\r\n  });\r\n\r\n  return <ul className=\"filters\">{filterBtnsArr}</ul>;\r\n};\r\n\r\nTasksFilter.propTypes = {\r\n  filterBtns: PropTypes.array,\r\n  onToggleActive: PropTypes.func,\r\n};\r\n\r\nexport default TasksFilter;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TasksFilter from '../Tasks-filter/Tasks-filter';\r\n\r\nconst Footer = ({ taskCount, onClearCompleted, filterBtns, onToggleActive }) => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">{taskCount} items left</span>\r\n      <TasksFilter filterBtns={filterBtns} onToggleActive={onToggleActive} />\r\n      <button type=\"button\" className=\"clear-completed\" onClick={onClearCompleted}>\r\n        Clear completed\r\n      </button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nFooter.propTypes = {\r\n  taskCount: PropTypes.number,\r\n  onClearCompleted: PropTypes.func,\r\n  filterBtns: PropTypes.array,\r\n  onToggleActive: PropTypes.func,\r\n};\r\n\r\nexport default Footer;\r\n","import TodoApp from './Todoapp';\r\n\r\nexport default TodoApp;\r\n","import React, { Component } from 'react';\r\nimport '../../index.css';\r\nimport { ENTER_KEY_CODE, ESC_KEY_CODE } from '../../constants';\r\n\r\nimport NewTaskForm from '../New-task-form';\r\nimport TaskList from '../Task-list';\r\nimport Footer from '../Footer';\r\n\r\nexport default class TodoApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      taskData: [\r\n        this.createTodoItem('Completed Task'),\r\n        this.createTodoItem('Editing Task'),\r\n        this.createTodoItem('New Task'),\r\n      ],\r\n      filterBtnsData: [\r\n        { label: 'All', isActive: false, id: 1 },\r\n        { label: 'Active', isActive: true, id: 2 },\r\n        { label: 'Completed', isActive: false, id: 3 },\r\n      ],\r\n    };\r\n  }\r\n\r\n  setID = () => {\r\n    return `_${Math.random().toString(36).substr(2, 9)}`;\r\n  };\r\n\r\n  deleteItem = (id) => {\r\n    this.setState(({ taskData }) => {\r\n      const newTaskData = taskData.filter((el) => el.id !== id);\r\n\r\n      return {\r\n        taskData: newTaskData,\r\n      };\r\n    });\r\n  };\r\n\r\n  addItem = (text) => {\r\n    const newItem = this.createTodoItem(text);\r\n\r\n    this.setState(({ taskData }) => {\r\n      const newTaskData = [...taskData, newItem];\r\n\r\n      return {\r\n        taskData: newTaskData,\r\n      };\r\n    });\r\n  };\r\n\r\n  onToggleCompleted = (id) => {\r\n    this.setState(({ taskData }) => {\r\n      return {\r\n        taskData: this.toggleProperty(taskData, id, 'completed'),\r\n      };\r\n    });\r\n  };\r\n\r\n  onToggleEditing = (id) => {\r\n    this.setState(({ taskData }) => {\r\n      return {\r\n        taskData: this.toggleProperty(taskData, id, 'editing'),\r\n      };\r\n    });\r\n  };\r\n\r\n  onClearCompleted = () => {\r\n    const { taskData } = this.state;\r\n    const newArr = taskData.filter((el) => !el.completed);\r\n    this.setState(() => {\r\n      return {\r\n        taskData: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  onToggleActive = (id) => {\r\n    this.setState(({ filterBtnsData }) => {\r\n      return {\r\n        filterBtnsData: this.activeToggler(filterBtnsData, id, 'isActive'),\r\n      };\r\n    });\r\n\r\n    const { taskData, filterBtnsData } = this.state;\r\n\r\n    filterBtnsData.forEach((el) => {\r\n      if (el.isActive && el.id === 3) {\r\n        const newArr = taskData.map((data) => {\r\n          if (data.completed === false) {\r\n            const newData = { ...data, hidden: true };\r\n            return newData;\r\n          }\r\n          if (data.completed) {\r\n            const newData = { ...data, hidden: false };\r\n            return newData;\r\n          }\r\n          return data;\r\n        });\r\n        this.setState(() => {\r\n          return {\r\n            taskData: newArr,\r\n          };\r\n        });\r\n      } else if (el.isActive && el.id === 2) {\r\n        const newArr = taskData.map((data) => {\r\n          if (data.completed) {\r\n            const newData = { ...data, hidden: true };\r\n            return newData;\r\n          }\r\n          if (data.completed === false) {\r\n            const newData = { ...data, hidden: false };\r\n            return newData;\r\n          }\r\n          return data;\r\n        });\r\n        this.setState(() => {\r\n          return {\r\n            taskData: newArr,\r\n          };\r\n        });\r\n      } else if (el.isActive && el.id === 1) {\r\n        const newArr = taskData.map((data) => {\r\n          const newData = { ...data, hidden: false };\r\n          return newData;\r\n        });\r\n        this.setState(() => {\r\n          return {\r\n            taskData: newArr,\r\n          };\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  onKeyCodeDown = (e, id) => {\r\n    if (e.keyCode === ENTER_KEY_CODE || e.keyCode === ESC_KEY_CODE) {\r\n      this.setState(({ taskData }) => {\r\n        return {\r\n          taskData: this.toggleProperty(taskData, id, 'editing'),\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  activeToggler(arr, id, propName) {\r\n    return arr.map((item) => {\r\n      if (item.id === id && item.isActive === false) {\r\n        const newItem = { ...item, [propName]: !item[propName] };\r\n        return newItem;\r\n      }\r\n      if (item.id !== id && item.isActive === true) {\r\n        const newItem = { ...item, [propName]: !item[propName] };\r\n        return newItem;\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  toggleProperty(arr, id, propName) {\r\n    return arr.map((item) => {\r\n      if (item.id === id) {\r\n        const newItem = { ...item, [propName]: !item[propName] };\r\n        return newItem;\r\n      }\r\n\r\n      return item;\r\n    });\r\n  }\r\n\r\n  createTodoItem(description) {\r\n    return {\r\n      description,\r\n      completed: false,\r\n      editing: false,\r\n      id: this.setID(),\r\n      hidden: false,\r\n      time: new Date(),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { taskData, filterBtnsData } = this.state;\r\n    const completedCount = taskData.filter((el) => el.completed).length;\r\n    const taskCount = taskData.length - completedCount;\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <header className=\"header\">\r\n          <h1>todos</h1>\r\n          <NewTaskForm onItemAdded={this.addItem} />\r\n        </header>\r\n        <section className=\"main\">\r\n          <TaskList\r\n            tasks={taskData}\r\n            onDeleted={this.deleteItem}\r\n            onToggleCompleted={this.onToggleCompleted}\r\n            onToggleEditing={this.onToggleEditing}\r\n            filterBtns={filterBtnsData}\r\n            onKeyCodeDown={this.onKeyCodeDown}\r\n          />\r\n          <Footer\r\n            taskCount={taskCount}\r\n            onClearCompleted={this.onClearCompleted}\r\n            filterBtns={filterBtnsData}\r\n            onToggleActive={this.onToggleActive}\r\n          />\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport TodoApp from './components/Todoapp';\r\n\r\nReactDOM.render(<TodoApp />, document.querySelector('#root'));\r\n"],"sourceRoot":""}